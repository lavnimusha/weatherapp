{"version":3,"sources":["components/ui.jsx","App.js","serviceWorker.js","index.js"],"names":["Ui","obj","_background","_box","iconUrl","props","iconId","value","background_selected","description","includes","console","log","$","css","class","city","country","src","alt","temperature","App","handleChange","address","setState","handleSelect","state","geocodeByAddress","then","results","getLatLng","latLng","fetch","lat","lng","response","json","jsonData","display","weather","Math","floor","main","temp","sys","name","icon","catch","error","this","onChange","onSelect","bar","getInputProps","suggestions","getSuggestionItemProps","loading","className","placeholder","map","suggestion","active","style","backgroundColor","cursor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f5f3a06.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nfunction Ui(obj){\n    var iconUrl = \"http://openweathermap.org/img/w/\" + obj.props.iconId + \".png\";\n    var _background, _box ;\n    let value = \"\";\n    var weather_arr =[\"cloud\", \"rain\", \"clear sky\", \"thunderstorm\",\"mist\"];\n    var background_selected = false\n                for ( value of weather_arr){\n                    var weather = obj.props.description.includes(value);\n                    if (weather === true){\n                        switch(value) {\n                        case \"cloud\":\n                            _background = \"https://cdn.theatlantic.com/assets/media/mt/science/cloud-thumb.jpg\";\n                            _box = \"#005580\";\n                        break;\n                        case \"thunderstorm\":\n                            _background = \"https://townsquare.media/site/65/files/2019/04/GettyImages-895010376.jpg?w=980&q=75\";\n                            _box = \"#220033\"\n                        break;\n                        case \"rain\":\n                            _background = \"https://www.lwdd.net/wp-content/uploads/2018/06/Rain-on-roof.jpg\";\n                            _box = \"#33080\"\n                        break;\n                        default:\n                            _background = \"https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://soa-inc.com/wp-content/uploads/2017/02/Weather.jpg\";\n                            _box = \"#99ccFF\";\n                            break;\n                        }\n                        background_selected = true;\n                    }\n                    if (background_selected === true){\n                        console.log(\"in if case\");\n                        break; \n                    }\n                }\n                if(background_selected === false){\n                    _background = \"https://cdn.shortpixel.ai/client/q_glossy,ret_img/https://soa-inc.com/wp-content/uploads/2017/02/Weather.jpg\";\n                    _box = \"#99ccFF\";\n                }\n                $(\"body\").css(\"background-image\", \"url(\" + _background + \")\");\n                $(\".display\").css(\"background\", _box);\n                    \n                    \n  \nreturn(\n        <div class = \"display\">\n            <h1>{obj.props.city},{obj.props.country}</h1>\n            <img class=\"weather_icon\" src={iconUrl} alt=\"\"/>\n            <p class=\"temperature_value\">{obj.props.temperature}Â°<span>C</span></p>\n            <p class=\"status\">{obj.props.description}</p>\n        </div>\n        );\n}\nexport default Ui;","import React from 'react';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport './App.css';\nimport Ui from './components/ui';\n\nimport {\n  geocodeByAddress,\n  geocodeByPlaceId,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '',\n      display: false,\n      temperature: '' ,\n      description:'',\n      iconId:'',\n      city:'',\n      country:''\n    };\n  }\n \n  handleChange = address => {\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    console.log(this.state.address);\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n        .then(latLng => {fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latLng.lat}&lon=${latLng.lng}&units=metric&appid=f04cdca73c381c05cf9dfd807c84353d`)\n          .then(response => response.json())\n            .then((jsonData) => {\n\n                  this.setState({ display: true,\n                      description : jsonData.weather[0].description,\n                      temperature : Math.floor(jsonData.main.temp),\n                      country : jsonData.sys.country,\n                      city : jsonData.name,\n                      iconId : jsonData.weather[0].icon\n                  }); \n          console.log(this.state)\n        }).catch(error => console.error('Error', error))})\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n   \n    return (\n      <div class=\"page\">\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n        bar\n        class = \"search_bar\"\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div className=\"meme\">\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#D3D3D3', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n\n      {this.state.display === true ?<Ui props={this.state}/>:\"\"}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}